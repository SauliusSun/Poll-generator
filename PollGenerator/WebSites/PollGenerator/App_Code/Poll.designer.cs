#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PollsDb")]
public partial class PollDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertStatistic(Statistic instance);
  partial void UpdateStatistic(Statistic instance);
  partial void DeleteStatistic(Statistic instance);
  partial void InsertQuestion(Question instance);
  partial void UpdateQuestion(Question instance);
  partial void DeleteQuestion(Question instance);
  partial void InsertAnswer(Answer instance);
  partial void UpdateAnswer(Answer instance);
  partial void DeleteAnswer(Answer instance);
  partial void InsertRespondersIP(RespondersIP instance);
  partial void UpdateRespondersIP(RespondersIP instance);
  partial void DeleteRespondersIP(RespondersIP instance);
  partial void InsertPoll(Poll instance);
  partial void UpdatePoll(Poll instance);
  partial void DeletePoll(Poll instance);
  #endregion
	
	public PollDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PollDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PollDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PollDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Statistic> Statistics
	{
		get
		{
			return this.GetTable<Statistic>();
		}
	}
	
	public System.Data.Linq.Table<Question> Questions
	{
		get
		{
			return this.GetTable<Question>();
		}
	}
	
	public System.Data.Linq.Table<Answer> Answers
	{
		get
		{
			return this.GetTable<Answer>();
		}
	}
	
	public System.Data.Linq.Table<RespondersIP> RespondersIPs
	{
		get
		{
			return this.GetTable<RespondersIP>();
		}
	}
	
	public System.Data.Linq.Table<Poll> Polls
	{
		get
		{
			return this.GetTable<Poll>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Statistics]")]
public partial class Statistic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PollID;
	
	private int _QuestionID;
	
	private string _AnswerName;
	
	private int _AnswerChose;
	
	private EntityRef<Question> _Question;
	
	private EntityRef<Poll> _Poll;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPollIDChanging(int value);
    partial void OnPollIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerNameChanging(string value);
    partial void OnAnswerNameChanged();
    partial void OnAnswerChoseChanging(int value);
    partial void OnAnswerChoseChanged();
    #endregion
	
	public Statistic()
	{
		this._Question = default(EntityRef<Question>);
		this._Poll = default(EntityRef<Poll>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollID", DbType="Int NOT NULL")]
	public int PollID
	{
		get
		{
			return this._PollID;
		}
		set
		{
			if ((this._PollID != value))
			{
				if (this._Poll.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPollIDChanging(value);
				this.SendPropertyChanging();
				this._PollID = value;
				this.SendPropertyChanged("PollID");
				this.OnPollIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
	public int QuestionID
	{
		get
		{
			return this._QuestionID;
		}
		set
		{
			if ((this._QuestionID != value))
			{
				if (this._Question.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQuestionIDChanging(value);
				this.SendPropertyChanging();
				this._QuestionID = value;
				this.SendPropertyChanged("QuestionID");
				this.OnQuestionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AnswerName
	{
		get
		{
			return this._AnswerName;
		}
		set
		{
			if ((this._AnswerName != value))
			{
				this.OnAnswerNameChanging(value);
				this.SendPropertyChanging();
				this._AnswerName = value;
				this.SendPropertyChanged("AnswerName");
				this.OnAnswerNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerChose", DbType="Int NOT NULL")]
	public int AnswerChose
	{
		get
		{
			return this._AnswerChose;
		}
		set
		{
			if ((this._AnswerChose != value))
			{
				this.OnAnswerChoseChanging(value);
				this.SendPropertyChanging();
				this._AnswerChose = value;
				this.SendPropertyChanged("AnswerChose");
				this.OnAnswerChoseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Statistic", Storage="_Question", ThisKey="QuestionID", OtherKey="Id", IsForeignKey=true)]
	public Question Question
	{
		get
		{
			return this._Question.Entity;
		}
		set
		{
			Question previousValue = this._Question.Entity;
			if (((previousValue != value) 
						|| (this._Question.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Question.Entity = null;
					previousValue.Statistics.Remove(this);
				}
				this._Question.Entity = value;
				if ((value != null))
				{
					value.Statistics.Add(this);
					this._QuestionID = value.Id;
				}
				else
				{
					this._QuestionID = default(int);
				}
				this.SendPropertyChanged("Question");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_Statistic", Storage="_Poll", ThisKey="PollID", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Poll Poll
	{
		get
		{
			return this._Poll.Entity;
		}
		set
		{
			Poll previousValue = this._Poll.Entity;
			if (((previousValue != value) 
						|| (this._Poll.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Poll.Entity = null;
					previousValue.Statistics.Remove(this);
				}
				this._Poll.Entity = value;
				if ((value != null))
				{
					value.Statistics.Add(this);
					this._PollID = value.Id;
				}
				else
				{
					this._PollID = default(int);
				}
				this.SendPropertyChanged("Poll");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private int _Type;
	
	private System.Nullable<int> _Sequence;
	
	private string _Required;
	
	private int _PollId;
	
	private EntitySet<Statistic> _Statistics;
	
	private EntitySet<Answer> _Answers;
	
	private EntityRef<Poll> _Poll;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnSequenceChanging(System.Nullable<int> value);
    partial void OnSequenceChanged();
    partial void OnRequiredChanging(string value);
    partial void OnRequiredChanged();
    partial void OnPollIdChanging(int value);
    partial void OnPollIdChanged();
    #endregion
	
	public Question()
	{
		this._Statistics = new EntitySet<Statistic>(new Action<Statistic>(this.attach_Statistics), new Action<Statistic>(this.detach_Statistics));
		this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
		this._Poll = default(EntityRef<Poll>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int")]
	public System.Nullable<int> Sequence
	{
		get
		{
			return this._Sequence;
		}
		set
		{
			if ((this._Sequence != value))
			{
				this.OnSequenceChanging(value);
				this.SendPropertyChanging();
				this._Sequence = value;
				this.SendPropertyChanged("Sequence");
				this.OnSequenceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Required", DbType="NVarChar(50)")]
	public string Required
	{
		get
		{
			return this._Required;
		}
		set
		{
			if ((this._Required != value))
			{
				this.OnRequiredChanging(value);
				this.SendPropertyChanging();
				this._Required = value;
				this.SendPropertyChanged("Required");
				this.OnRequiredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollId", DbType="Int NOT NULL")]
	public int PollId
	{
		get
		{
			return this._PollId;
		}
		set
		{
			if ((this._PollId != value))
			{
				if (this._Poll.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPollIdChanging(value);
				this.SendPropertyChanging();
				this._PollId = value;
				this.SendPropertyChanged("PollId");
				this.OnPollIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Statistic", Storage="_Statistics", ThisKey="Id", OtherKey="QuestionID")]
	public EntitySet<Statistic> Statistics
	{
		get
		{
			return this._Statistics;
		}
		set
		{
			this._Statistics.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Answers", ThisKey="Id", OtherKey="QuestionId")]
	public EntitySet<Answer> Answers
	{
		get
		{
			return this._Answers;
		}
		set
		{
			this._Answers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_Question", Storage="_Poll", ThisKey="PollId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Poll Poll
	{
		get
		{
			return this._Poll.Entity;
		}
		set
		{
			Poll previousValue = this._Poll.Entity;
			if (((previousValue != value) 
						|| (this._Poll.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Poll.Entity = null;
					previousValue.Questions.Remove(this);
				}
				this._Poll.Entity = value;
				if ((value != null))
				{
					value.Questions.Add(this);
					this._PollId = value.Id;
				}
				else
				{
					this._PollId = default(int);
				}
				this.SendPropertyChanged("Poll");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Statistics(Statistic entity)
	{
		this.SendPropertyChanging();
		entity.Question = this;
	}
	
	private void detach_Statistics(Statistic entity)
	{
		this.SendPropertyChanging();
		entity.Question = null;
	}
	
	private void attach_Answers(Answer entity)
	{
		this.SendPropertyChanging();
		entity.Question = this;
	}
	
	private void detach_Answers(Answer entity)
	{
		this.SendPropertyChanging();
		entity.Question = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answer")]
public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private int _QuestionId;
	
	private EntityRef<Question> _Question;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    #endregion
	
	public Answer()
	{
		this._Question = default(EntityRef<Question>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
	public int QuestionId
	{
		get
		{
			return this._QuestionId;
		}
		set
		{
			if ((this._QuestionId != value))
			{
				if (this._Question.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQuestionIdChanging(value);
				this.SendPropertyChanging();
				this._QuestionId = value;
				this.SendPropertyChanged("QuestionId");
				this.OnQuestionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Question Question
	{
		get
		{
			return this._Question.Entity;
		}
		set
		{
			Question previousValue = this._Question.Entity;
			if (((previousValue != value) 
						|| (this._Question.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Question.Entity = null;
					previousValue.Answers.Remove(this);
				}
				this._Question.Entity = value;
				if ((value != null))
				{
					value.Answers.Add(this);
					this._QuestionId = value.Id;
				}
				else
				{
					this._QuestionId = default(int);
				}
				this.SendPropertyChanged("Question");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RespondersIP")]
public partial class RespondersIP : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _PollId;
	
	private string _IP;
	
	private EntityRef<Poll> _Poll;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPollIdChanging(int value);
    partial void OnPollIdChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    #endregion
	
	public RespondersIP()
	{
		this._Poll = default(EntityRef<Poll>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollId", DbType="Int NOT NULL")]
	public int PollId
	{
		get
		{
			return this._PollId;
		}
		set
		{
			if ((this._PollId != value))
			{
				if (this._Poll.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPollIdChanging(value);
				this.SendPropertyChanging();
				this._PollId = value;
				this.SendPropertyChanged("PollId");
				this.OnPollIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NChar(200) NOT NULL", CanBeNull=false)]
	public string IP
	{
		get
		{
			return this._IP;
		}
		set
		{
			if ((this._IP != value))
			{
				this.OnIPChanging(value);
				this.SendPropertyChanging();
				this._IP = value;
				this.SendPropertyChanged("IP");
				this.OnIPChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_RespondersIP", Storage="_Poll", ThisKey="PollId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Poll Poll
	{
		get
		{
			return this._Poll.Entity;
		}
		set
		{
			Poll previousValue = this._Poll.Entity;
			if (((previousValue != value) 
						|| (this._Poll.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Poll.Entity = null;
					previousValue.RespondersIPs.Remove(this);
				}
				this._Poll.Entity = value;
				if ((value != null))
				{
					value.RespondersIPs.Add(this);
					this._PollId = value.Id;
				}
				else
				{
					this._PollId = default(int);
				}
				this.SendPropertyChanged("Poll");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Poll")]
public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Description;
	
	private string _EndDesc;
	
	private int _ResponseLimit;
	
	private string _Url;
	
	private System.DateTime _Created;
	
	private string _UserName;
	
	private int _ResponseCount;
	
	private bool _ShowResults;
	
	private bool _MultipleAnswers;
	
	private bool _PublicPoll;
	
	private EntitySet<Statistic> _Statistics;
	
	private EntitySet<Question> _Questions;
	
	private EntitySet<RespondersIP> _RespondersIPs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEndDescChanging(string value);
    partial void OnEndDescChanged();
    partial void OnResponseLimitChanging(int value);
    partial void OnResponseLimitChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnResponseCountChanging(int value);
    partial void OnResponseCountChanged();
    partial void OnShowResultsChanging(bool value);
    partial void OnShowResultsChanged();
    partial void OnMultipleAnswersChanging(bool value);
    partial void OnMultipleAnswersChanged();
    partial void OnPublicPollChanging(bool value);
    partial void OnPublicPollChanged();
    #endregion
	
	public Poll()
	{
		this._Statistics = new EntitySet<Statistic>(new Action<Statistic>(this.attach_Statistics), new Action<Statistic>(this.detach_Statistics));
		this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
		this._RespondersIPs = new EntitySet<RespondersIP>(new Action<RespondersIP>(this.attach_RespondersIPs), new Action<RespondersIP>(this.detach_RespondersIPs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDesc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string EndDesc
	{
		get
		{
			return this._EndDesc;
		}
		set
		{
			if ((this._EndDesc != value))
			{
				this.OnEndDescChanging(value);
				this.SendPropertyChanging();
				this._EndDesc = value;
				this.SendPropertyChanged("EndDesc");
				this.OnEndDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseLimit", DbType="Int NOT NULL")]
	public int ResponseLimit
	{
		get
		{
			return this._ResponseLimit;
		}
		set
		{
			if ((this._ResponseLimit != value))
			{
				this.OnResponseLimitChanging(value);
				this.SendPropertyChanging();
				this._ResponseLimit = value;
				this.SendPropertyChanged("ResponseLimit");
				this.OnResponseLimitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseCount", DbType="Int NOT NULL")]
	public int ResponseCount
	{
		get
		{
			return this._ResponseCount;
		}
		set
		{
			if ((this._ResponseCount != value))
			{
				this.OnResponseCountChanging(value);
				this.SendPropertyChanging();
				this._ResponseCount = value;
				this.SendPropertyChanged("ResponseCount");
				this.OnResponseCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowResults", DbType="Bit NOT NULL")]
	public bool ShowResults
	{
		get
		{
			return this._ShowResults;
		}
		set
		{
			if ((this._ShowResults != value))
			{
				this.OnShowResultsChanging(value);
				this.SendPropertyChanging();
				this._ShowResults = value;
				this.SendPropertyChanged("ShowResults");
				this.OnShowResultsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultipleAnswers", DbType="Bit NOT NULL")]
	public bool MultipleAnswers
	{
		get
		{
			return this._MultipleAnswers;
		}
		set
		{
			if ((this._MultipleAnswers != value))
			{
				this.OnMultipleAnswersChanging(value);
				this.SendPropertyChanging();
				this._MultipleAnswers = value;
				this.SendPropertyChanged("MultipleAnswers");
				this.OnMultipleAnswersChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicPoll", DbType="Bit NOT NULL")]
	public bool PublicPoll
	{
		get
		{
			return this._PublicPoll;
		}
		set
		{
			if ((this._PublicPoll != value))
			{
				this.OnPublicPollChanging(value);
				this.SendPropertyChanging();
				this._PublicPoll = value;
				this.SendPropertyChanged("PublicPoll");
				this.OnPublicPollChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_Statistic", Storage="_Statistics", ThisKey="Id", OtherKey="PollID")]
	public EntitySet<Statistic> Statistics
	{
		get
		{
			return this._Statistics;
		}
		set
		{
			this._Statistics.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_Question", Storage="_Questions", ThisKey="Id", OtherKey="PollId")]
	public EntitySet<Question> Questions
	{
		get
		{
			return this._Questions;
		}
		set
		{
			this._Questions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_RespondersIP", Storage="_RespondersIPs", ThisKey="Id", OtherKey="PollId")]
	public EntitySet<RespondersIP> RespondersIPs
	{
		get
		{
			return this._RespondersIPs;
		}
		set
		{
			this._RespondersIPs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Statistics(Statistic entity)
	{
		this.SendPropertyChanging();
		entity.Poll = this;
	}
	
	private void detach_Statistics(Statistic entity)
	{
		this.SendPropertyChanging();
		entity.Poll = null;
	}
	
	private void attach_Questions(Question entity)
	{
		this.SendPropertyChanging();
		entity.Poll = this;
	}
	
	private void detach_Questions(Question entity)
	{
		this.SendPropertyChanging();
		entity.Poll = null;
	}
	
	private void attach_RespondersIPs(RespondersIP entity)
	{
		this.SendPropertyChanging();
		entity.Poll = this;
	}
	
	private void detach_RespondersIPs(RespondersIP entity)
	{
		this.SendPropertyChanging();
		entity.Poll = null;
	}
}
#pragma warning restore 1591
